//github.com/rebot333/rebotlib.js v0.3
class Engine{constructor(t,e){this.interval=e,this.func=t}start(){this.engine=setInterval(this.func,this.interval)}stop(){clearInterval(this.engine)}}class KeyboardIn{constructor(t,e=!1){this.keys={};let s=this;document.addEventListener("keydown",function(e){s.keys[e.key.toLowerCase()]=!0,t(e.key.toLowerCase())}),document.addEventListener("keyup",function(t){delete s.keys[t.key.toLowerCase()],e&&e(t.key.toLowerCase())})}}class Canvas{constructor(t,e=1920,s=1080,n=!1){this.element=document.createElement("canvas"),this.element.id=t,document.body.appendChild(this.element),this.ctx=this.element.getContext("2d"),this.ctx.canvas.width=e,this.ctx.canvas.height=s,this.mousePos={x:0,y:0},this.buttons=[];let i=this;this.element.addEventListener("mousemove",function(t){let e=i.element.getBoundingClientRect();i.mousePos={x:(t.clientX-e.left)/(e.right-e.left)*i.element.width,y:(t.clientY-e.top)/(e.bottom-e.top)*i.element.height}}),this.mouseDown=!1,this.element.addEventListener("mousedown",function(t){i.mouseDown=!0,n.mDownFunc&&n.mDownFunc(i.mousePos);for(let t=0;t<i.buttons.length;t++)i.mousePos.x>=i.buttons[t].x&&i.mousePos.x<=i.buttons[t].x+i.buttons[t].width&&i.mousePos.y>=i.buttons[t].y&&i.mousePos.y<=i.buttons[t].y+i.buttons[t].height&&i.buttons[t].func()}),this.element.addEventListener("mouseup",function(t){i.mouseDown=!1,n.mUpFunc&&n.mUpFunc(i.mousePos)})}getMousePos(){return this.mousePos}createButton(t,e,s,n,i,o){for(let e=0;e<this.buttons.length;e++)if(this.buttons[e].id==t)throw"ID '"+t+"' is already in use!";this.buttons.push({id:t,func:e,x:s,y:n,width:i,height:o})}deleteButton(t){for(let e=0;e<this.buttons.length;e++)if(this.buttons[e].id==t)return this.buttons.splice(e,1),!0;throw"Button '"+t+"' does not exist!"}}class FunctionPoller{constructor(t,e,s="Poll: "){this.element=document.createElement("code"),document.body.appendChild(this.element);let n=this.element;setInterval(function(){n.innerHTML=s.concat(t())},e)}}class Slider{constructor(t,e,s,n,i=1,o=0,h=!1){let u=document.createElement("div"),d=document.createElement("input"),l=document.createElement("code");d.id=t,d.addEventListener("input",function(){l.innerHTML=this.value,h&&e(this.value)},!1),d.onchange=function(){l.innerHTML=this.value,e(this.value)},d.min=s,d.max=n,d.step=i,d.value=o,d.type="range",l.id=t+"Out",l.innerHTML=o,u.appendChild(d),u.appendChild(l),document.body.appendChild(u)}}function createOptions(t,e){for(let s=0;s<e.length;s++){let n=document.createElement("option");n.innerHTML=e[s],n.value=e[s],t.appendChild(n)}}class Dropdown{constructor(t,e,s){let n=document.createElement("div");this.select=document.createElement("select"),this.arr=s,this.id=t,this.select.id=t,this.select.onchange=function(){e(this.value)},createOptions(this.select,s),n.appendChild(this.select),document.body.appendChild(n)}add(t){this.arr.push(t),this.select.innerHTML="",createOptions(this.select,this.arr)}remove(t){let e=this.arr.indexOf(t);e>-1&&(this.arr.splice(e,1),this.select.innerHTML="",createOptions(this.select,this.arr))}}class Quadtree{constructor(t,e=10,s=4,n=0){this.bounds=t,this.bounds.x=t.x||0,this.bounds.y=t.y||0,this.maxObj=e,this.maxLv=s,this.objects=[],this.nodes=[],this.level=n}insert(t){if(this.nodes.length){let e=this.getNodes(t);for(let s=0;s<e.length;s++)this.nodes[e[s]].insert(t)}else if(this.objects.push(t),this.objects.length>this.maxObj&&this.level<this.maxLv){this.nodes.length||this.split();for(let t=0;t<this.objects.length;t++){let e=this.getNodes(this.objects[t]);for(let s=0;s<e.length;s++)this.nodes[e[s]].insert(this.objects[t])}this.objects=[]}}retrieve(t){let e=this.getNodes(t),s=this.objects;if(this.nodes.length)for(let n=0;n<e.length;n++)s=s.concat(this.nodes[e[n]].retrieve(t));return s=s.filter(function(t,e){return s.indexOf(t)>=e})}clear(){this.objects=[],this.nodes=[]}getNodes(t){let e=[],s=this.bounds.y+this.bounds.height/2,n=this.bounds.x+this.bounds.width/2,i=t.y<=s,o=t.x<=n,h=t.y+t.height>=s,u=t.x+t.width>=n;return i&&u&&e.push(0),i&&o&&e.push(1),o&&h&&e.push(2),h&&u&&e.push(3),e}split(){let t=this.level+1,e=this.bounds.height/2,s=this.bounds.width/2;this.nodes.push(new Quadtree({x:this.bounds.x+s,y:this.bounds.y,height:e,width:s},this.maxObj,this.maxLv,t)),this.nodes.push(new Quadtree({x:this.bounds.x,y:this.bounds.y,height:e,width:s},this.maxObj,this.maxLv,t)),this.nodes.push(new Quadtree({x:this.bounds.x,y:this.bounds.y+e,height:e,width:s},this.maxObj,this.maxLv,t)),this.nodes.push(new Quadtree({x:this.bounds.x+s,y:this.bounds.y+e,height:e,width:s},this.maxObj,this.maxLv,t))}}
