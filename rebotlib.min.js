//github.com/rebot333/rebotlib.js v0.3.2
class Engine{constructor(t,e){this.interval=e,this.func=t}start(){this.engine=setInterval(this.func,this.interval)}stop(){clearInterval(this.engine)}}class KeyboardIn{constructor(t=!1,e=!1){this.keys={},document.addEventListener("keydown",e=>{this.keys[e.key.toLowerCase()]=!0,t&&t(e.key.toLowerCase())}),document.addEventListener("keyup",t=>{delete this.keys[t.key.toLowerCase()],e&&e(t.key.toLowerCase())})}}class Canvas{constructor(t,e=1920,s=1080,i=!1){this.element=document.createElement("canvas"),this.element.id=t,document.body.appendChild(this.element),this.ctx=this.element.getContext("2d"),this.ctx.canvas.width=e,this.ctx.canvas.height=s,this.mousePos={x:0,y:0},this.buttons=[],this.element.addEventListener("mousemove",t=>{let e=this.element.getBoundingClientRect();this.mousePos={x:(t.clientX-e.left)/(e.right-e.left)*this.element.width,y:(t.clientY-e.top)/(e.bottom-e.top)*this.element.height}}),this.mouseDown=!1,this.element.addEventListener("mousedown",t=>{this.mouseDown=!0,i.mDownFunc&&i.mDownFunc(this.mousePos);for(let t=0;t<this.buttons.length;t++)this.mousePos.x>=this.buttons[t].x&&this.mousePos.x<=this.buttons[t].x+this.buttons[t].width&&this.mousePos.y>=this.buttons[t].y&&this.mousePos.y<=this.buttons[t].y+this.buttons[t].height&&this.buttons[t].func()}),this.element.addEventListener("mouseup",t=>{this.mouseDown=!1,i.mUpFunc&&i.mUpFunc(this.mousePos)})}wrapText(t,e,s,i,n=50){let h=t.split(" "),o=[0,""];for(let t=0;t<h.length;t++){let l=o[1]+h[t]+" ";this.ctx.measureText(l).width<=i?(o[0]++,o[1]=l):(0===o[0]?(ctx.fillText(l,e,s),o=[0,""]):(ctx.fillText(o[1],e,s),o=[0,h[t]+" "]),s+=n)}ctx.fillText(o[1],e,s)}getMousePos(){return this.mousePos}createButton(t,e,s,i,n,h){for(let e=0;e<this.buttons.length;e++)if(this.buttons[e].id==t)throw"ID '"+t+"' is already in use!";this.buttons.push({id:t,func:e,x:s,y:i,width:n,height:h})}deleteButton(t){for(let e=0;e<this.buttons.length;e++)if(this.buttons[e].id==t)return this.buttons.splice(e,1),!0;throw"Button '"+t+"' does not exist!"}}class FunctionPoller{constructor(t,e,s="Poll: "){this.element=document.createElement("code"),document.body.appendChild(this.element),setInterval(()=>{this.element.innerHTML=s.concat(t())},e)}}class Slider{constructor(t,e,s,i,n=1,h=0,o=!1){let l=document.createElement("div"),d=document.createElement("input"),u=document.createElement("code");d.id=t,d.addEventListener("input",function(){u.innerHTML=this.value,o&&e(this.value)},!1),d.onchange=function(){u.innerHTML=this.value,e(this.value)},d.min=s,d.max=i,d.step=n,d.value=h,d.type="range",u.id=t+"Out",u.innerHTML=h,l.appendChild(d),l.appendChild(u),document.body.appendChild(l)}}function createOptions(t,e){for(let s=0;s<e.length;s++){let i=document.createElement("option");i.innerHTML=e[s],i.value=e[s],t.appendChild(i)}}class Dropdown{constructor(t,e,s){let i=document.createElement("div");this.select=document.createElement("select"),this.arr=s,this.id=t,this.select.id=t,this.select.onchange=function(){e(this.value)},createOptions(this.select,s),i.appendChild(this.select),document.body.appendChild(i)}add(t){this.arr.push(t),this.select.innerHTML="",createOptions(this.select,this.arr)}remove(t){let e=this.arr.indexOf(t);e>-1&&(this.arr.splice(e,1),this.select.innerHTML="",createOptions(this.select,this.arr))}}class Quadtree{constructor(t,e=10,s=4,i=0){this.bounds=t,this.bounds.x=t.x||0,this.bounds.y=t.y||0,this.maxObj=e,this.maxLv=s,this.objects=[],this.nodes=[],this.level=i}insert(t){if(this.nodes.length){let e=this.getNodes(t);for(let s=0;s<e.length;s++)this.nodes[e[s]].insert(t)}else if(this.objects.push(t),this.objects.length>this.maxObj&&this.level<this.maxLv){this.nodes.length||this.split();for(let t=0;t<this.objects.length;t++){let e=this.getNodes(this.objects[t]);for(let s=0;s<e.length;s++)this.nodes[e[s]].insert(this.objects[t])}this.objects=[]}}retrieve(t){let e=this.getNodes(t),s=this.objects;if(this.nodes.length)for(let i=0;i<e.length;i++)s=s.concat(this.nodes[e[i]].retrieve(t));return s=s.filter(function(t,e){return s.indexOf(t)>=e})}clear(){this.objects=[],this.nodes=[]}getNodes(t){let e=[],s=this.bounds.y+this.bounds.height/2,i=this.bounds.x+this.bounds.width/2,n=t.y<=s,h=t.x<=i,o=t.y+t.height>=s,l=t.x+t.width>=i;return n&&l&&e.push(0),n&&h&&e.push(1),h&&o&&e.push(2),o&&l&&e.push(3),e}split(){let t=this.level+1,e=this.bounds.height/2,s=this.bounds.width/2;this.nodes.push(new Quadtree({x:this.bounds.x+s,y:this.bounds.y,height:e,width:s},this.maxObj,this.maxLv,t)),this.nodes.push(new Quadtree({x:this.bounds.x,y:this.bounds.y,height:e,width:s},this.maxObj,this.maxLv,t)),this.nodes.push(new Quadtree({x:this.bounds.x,y:this.bounds.y+e,height:e,width:s},this.maxObj,this.maxLv,t)),this.nodes.push(new Quadtree({x:this.bounds.x+s,y:this.bounds.y+e,height:e,width:s},this.maxObj,this.maxLv,t))}}
